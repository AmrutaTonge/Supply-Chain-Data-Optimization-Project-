# -*- coding: utf-8 -*-
"""project script file

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oq61ockosiELQIM_An0j-o0XY0ncN3XX
"""

from google.colab import files
uploaded = files.upload()

!pip install pandas

import pandas as pd

# Load the input data
order_report = pd.read_excel('/content/Company_X_-_Order_Report[1].xlsx')   # Replace with your actual file path
pincode_mapping = pd.read_excel('/content/Company_X_-_Pincode_Zones[1].xlsx')  # Replace with your actual file path
sku_master = pd.read_excel('/content/Company_X_-_SKU_Master[1].xlsx')  # Replace with your actual file path
courier_invoice = pd.read_excel('/content/Courier_Company_-_Invoice[1].xlsx')  # Replace with your actual file path
charges_rate_card = pd.read_excel('/content/Courier_Company_-_Rates[1].xlsx')  # Replace with your actual file pa

# display all dataframe
display(order_report)
display(pincode_mapping)
display(sku_master)
display(courier_invoice)
display(charges_rate_card)

# rename df column as per need
order_report.rename(columns={'ExternOrderNo': 'order_id', 'SKU': 'sku', 'Order Qty': 'order_qty'}, inplace=True)
pincode_mapping.rename(columns={'Warehouse Pincode': 'warehouse_pincode', 'Customer Pincode': 'customer_pincode', 'Zone': 'zone'}, inplace=True)
sku_master.rename(columns={'SKU': 'sku', 'Weight (g)': 'weight'}, inplace=True)
courier_invoice.rename(columns={'Invoice - AWB ,Code': 'awb_code', 'Order ID': 'order_id', 'Charged Weight': 'charged_weight', 'Warehouse Pincode': 'warehouse_pincode', 'Customer Pincode': 'customer_pincode', 'Zone': 'delivery_zone', 'Type of Shipment': 'shipment_type', 'Billing Amount (Rs.)': 'billing_amount', 'Rates - Zone': 'zone_rate', 'Weight Slabs': 'weight_slabs', 'Forward Fixed Charge': 'forward_fixed_charge', 'Forward Additional Weight Slab Charge': 'forward_additional_charge', 'RTO Fixed Charge': 'rto_fixed_charge', 'RTO Additional Weight Slab Charge': 'rto_additional_charge'}, inplace=True)

display(order_report)

display(pincode_mapping)

# Merge dataframes on common columns
merged_data = pd.merge(order_report, sku_master, on=['sku', 'sku'], how='inner')

# Display the merged dataframe
print(merged_data)

merged_data = pd.merge(merged_data, courier_invoice, left_on='order_id', right_on='order_id')

print(merged_data)

merged_data = pd.merge(merged_data, pincode_mapping, left_on='warehouse_pincode', right_on='warehouse_pincode')

print(merged_data)

# Print or use the merged_data dataframe as needed
print(merged_data)

# Calculate total weight as per X
merged_data['total_weight_x'] = merged_data['weight'] * merged_data['order_qty'] / 1000

# Calculate total weight as per Courier Company and weight slab
merged_data['weight_slab_charged'] = merged_data['charged_weight']
merged_data['total_weight_courier'] = merged_data['charged_weight'] * merged_data['order_qty'] / 1000

# Calculate the difference between Expected Charges and Billed Charges
merged_data['expected_charge_x'] = 100 * merged_data['order_qty']
merged_data['difference'] = merged_data['billing_amount'] - merged_data['expected_charge_x']

# Create a summary table
summary_table = pd.DataFrame({
    'Total orders where X has been correctly charged': [len(merged_data[merged_data['difference'] == 0])],
    'Total Orders where X has been overcharged': [len(merged_data[merged_data['difference'] > 0])],
    'Total Orders where X has been undercharged': [len(merged_data[merged_data['difference'] < 0])],
    'Amount (Rs.)': [merged_data['billing_amount'].sum()]
})

print(summary_table)

# Save the results to a CSV file
merged_data.to_csv('resultant_output.csv', index=False)

resultant_merged_df=pd.read_csv('resultant_output.csv')
print(resultant_merged_df)

summary_table.to_csv('summary_table.csv', index=False)

resultant_summary_table=pd.read_csv('summary_table.csv')
print(resultant_summary_table)